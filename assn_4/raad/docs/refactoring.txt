Class-level Refactoring Report
==========

For each refactoring opportunity , please provide the following information:
    - where the issue is
    - what SOLID principle (if any) are violated
    - whether a class implementation or class interface refactoring
      is needed
    - a brief description of each issue
    - how to fix the issue

CLASS-LEVEL REFACTORING IMPLEMENTED

Refactoring 0:
  Location: User.java
	SOLID principle: Single Responsibility Principle
	class implementation or class interface: class implementation
	Cause: To track following relationships between users.
	Fix: Added 'hashmap fdj'

Refactoring 1:
  Location: User.java
	SOLID principle: Single Responsibility Principle
	class implementation or class interface: Class implementation
	Cause: To check the following relationship
	Fix: Implemented follow() method

Refactoring 2:
  Location: User.java
	SOLID principle: Single Responsibility Principle
	class implementation or class interface: Class implementation
	Cause: Confirms if a user is following another user.
	Fix: Implemented isFollowing() method

Refactoring 3:
  Location: FriendRecommender.java
	SOLID principle: Open/Closed
	class implementation or class interface: Class interface
	Cause: Generalizes error handling for wrong arguments
	Fix: Added try-catch block

CLASS-LEVEL REFACTORING SUGGESTED BUT NOT IMPLEMENTED

Refactoring 2:
  Location:
	SOLID principle:
	class implementation or class interface:
	Cause:
	Fix:

Refactoring 3:
  Location:
	SOLID principle:
	class implementation or class interface:
	Cause:
	Fix:

